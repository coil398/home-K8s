- name: Setup Kubernetes configuration
  hosts: nodegroup
  become: yes
  tasks:
    - name: Create k8s.conf file
      copy:
        content: |
          overlay
          br_netfilter
        dest: /etc/modules-load.d/k8s.conf
        owner: root
        group: root
        mode: '0644'

    - name: Load overlay kernel module
      command: modprobe overlay

    - name: Load br_netfilter kernel module
      command: modprobe br_netfilter

    - name: Add sysctl settings for Kubernetes
      copy:
        content: |
          net.bridge.bridge-nf-call-iptables = 1
          net.bridge.bridge-nf-call-ip6tables = 1
          net.ipv4.ip_forward = 1
        dest: /etc/sysctl.d/k8s.conf
        owner: root
        group: root
        mode: '0644'

    - name: Apply sysctl parameters without reboot
      command: sysctl --system

    - name: Comment out swap entry in /etc/fstab
      lineinfile:
        path: /etc/fstab
        regexp: '^([^#]*/swap.img.*)$'
        line: '#\1'
        backrefs: yes

- name: Update /etc/hosts for name resolution
  hosts: nodegroup
  become: yes
  tasks:
    - name: Add hosts entries
      lineinfile:
        path: /etc/hosts
        line: "{{ hostvars[item].ansible_host }} {{ item }}"
        state: present
      loop: "{{ groups['nodegroup'] }}"
      when: hostvars[item].ansible_host is defined

- name: Install container runtime
  hosts: nodegroup
  become: yes
  tasks:
    - name: Install containerd
      apt:
        name: containerd
        state: latest
        update_cache: yes

- name: Configure Containerd to use systemd cgroup driver
  hosts: nodegroup
  become: yes
  tasks:
    - name: Create containerd config directory if not exists
      file:
        path: /etc/containerd
        state: directory

    - name: Configure Containerd to use systemd cgroup driver
      copy:
        dest: /etc/containerd/config.toml
        content: |
          [plugins."io.containerd.grpc.v1.cri".containerd.runtimes.runc.options]
            SystemCgroup = true
        owner: root
        group: root
        mode: '0644'

    - name: Restart containerd to apply new configuration
      systemd:
        name: containerd
        state: restarted
        daemon_reload: yes

- name: Install Kubernetes tools
  hosts: nodegroup
  become: yes
  tasks:
    - name: Install apt-transport-https, curl, gnupg, ca-certificates
      apt:
        name:
          - apt-transport-https
          - curl
          - gnupg
          - ca-certificates
        state: present

    - name: Add Kubernetes GPG key
      apt_key:
        url: https://packages.cloud.google.com/apt/doc/apt-key.gpg
        state: present

    - name: Add Kubernetes repository
      apt_repository:
        repo: deb https://apt.kubernetes.io/ kubernetes-xenial main

    - name: Install kubeadm, kubelet, and kubectl
      apt:
        name:
          - kubeadm
          - kubelet
          - kubectl
        state: latest
      when: inventory_hostname in groups['control_plane']

    - name: Install kubeadm and kubelet
      apt:
        name:
          - kubeadm
          - kubelet
        state: latest
      when: inventory_hostname in groups['data_plane']

- name: Install and configure kube-vip
  hosts: control_plane
  become: yes
  vars:
    kube_vip_version: "v0.6.4"
    interface: "enp1s0"
    vip_address: "172.28.1.10"
  tasks:
    - name: Pull kube-vip image
      shell: |
        ctr image pull ghcr.io/kube-vip/kube-vip:{{ kube_vip_version }}

    - name: Generate kube-vip manifest
      shell: |
        ctr run --rm --net-host ghcr.io/kube-vip/kube-vip:{{ kube_vip_version }} vip /kube-vip manifest pod \
          --interface {{ interface }} \
          --vip {{ vip_address }} \
          --controlplane \
          --arp \
          --leaderElection \
        > /etc/kubernetes/manifests/kube-vip.yaml
      args:
        executable: /bin/bash

    - name: Ensure kube-vip is running
      systemd:
        name: kubelet
        state: restarted
        daemon_reload: yes

- name: Init kubeadm
  hosts: control_plane
  become: yes
  vars:
    vip_address: "172.28.1.10"
  tasks:
    - name: Init kubeadm
      shell: |
        kubeadm init \
          --control-plane-endpoint {{ vip_address }}:6443 \
          --pod-network-cidr=10.1.0.0/16 \
          --upload-certs

- name: Set up Kubernetes admin config
  hosts: control_plane
  tasks:
    - name: Get current user name
      command: whoami
      register: whoami
      become: no

    - name: Get current user ID
      command: id -u
      register: userid
      become: no

    - name: Create .kube directory in user home
      become: yes
      file:
        path: "/home/{{ whoami.stdout }}/.kube"
        state: directory
        owner: "{{ whoami.stdout }}"
        group: "{{ whoami.stdout }}"
        mode: '0755'

    - name: Copy admin.conf to user's kube config
      become: yes
      copy:
        src: /etc/kubernetes/admin.conf
        dest: "/home/{{ whoami.stdout }}/.kube/config"
        owner: "{{ whoami.stdout }}"
        group: "{{ whoami.stdout }}"
        mode: '0644'
